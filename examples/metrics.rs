extern crate afm;
use afm::*;
use std::fs::File;
use std::io::{Read, BufReader};
use std::path::Path;

fn main() {
        println!("// Generated by afm/example/metrics.rs");
        println!("pub fn metrics() -> Vec<(&'static str, Vec<(i64, i64)>)> {{");
        println!("let mut p = Vec::new();");
    let files = [
        "Courier-Bold.afm",
        "Courier-BoldOblique.afm",
        "Courier-Oblique.afm",
        "Courier.afm",
        "Helvetica-Bold.afm",
        "Helvetica-BoldOblique.afm",
        "Helvetica-Oblique.afm",
        "Helvetica.afm",
        "Symbol.afm",
        "Times-Bold.afm",
        "Times-BoldItalic.afm",
        "Times-Italic.afm",
        "Times-Roman.afm",
        "ZapfDingbats.afm",
    ];
    for fname in &files {
        let p = Path::new("data").join(fname);
        let name = p.file_stem().unwrap().to_string_lossy();
        let f = File::open(p.clone()).unwrap();
        let mut f = BufReader::new(f);
        let mut contents = Vec::new();
        f.read_to_end(&mut contents);

        let mut v = Vec::new();
        for i in parse(&contents).expect("should have parsed") {
            match i {
                Line::CharMetrics(c) => {
                    if c.value != -1 {
                        v.push((c.value, c.width0x.unwrap()));
                    }
                },
                    _ => {}
            }
        }
        println!("p.push((\"{}\", vec!{:?}));", name, v);
    }
        println!("p }}");
}
